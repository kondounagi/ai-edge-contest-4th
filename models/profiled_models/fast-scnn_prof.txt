@ lucina GPU 9
Timer unit: 1e-06 s

Total time: 3.47301 s
File: /home/hisadome/ai_edge/Fast-SCNN-pytorch/models/fast_scnn.py
Function: forward at line 32

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    32                                               @profile
    33                                               def forward(self, x):
    34       500       3536.0      7.1      0.1          size = x.size()[2:]
    35       500     429045.0    858.1     12.4          higher_res_features = self.learning_to_downsample(x)
    36       500    2444716.0   4889.4     70.4          x = self.global_feature_extractor(higher_res_features)
    37       500     263651.0    527.3      7.6          x = self.feature_fusion(higher_res_features, x)
    38       500     288687.0    577.4      8.3          x = self.classifier(x)
    39       500        698.0      1.4      0.0          outputs = []
    40       500      40950.0     81.9      1.2          x = F.interpolate(x, size, mode='bilinear', align_corners=True)
    41       500        854.0      1.7      0.0          outputs.append(x)
    42       500        442.0      0.9      0.0          if self.aux:
    43                                                       auxout = self.auxlayer(higher_res_features)
    44                                                       auxout = F.interpolate(auxout, size, mode='bilinear', align_corners=True)
    45                                                       outputs.append(auxout)
    46       500        433.0      0.9      0.0          return tuple(outputs)

Total time: 152.366 s
File: demo.py
Function: demo at line 31

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    31                                           @profile
    32                                           def demo():
    33         1     545612.0 545612.0      0.4      device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    34                                               # output folder
    35         1         42.0     42.0      0.0      if not os.path.exists(args.outdir):
    36                                                   os.makedirs(args.outdir)
    37                                           
    38                                               # image transform
    39         1          4.0      4.0      0.0      input_transform = transforms.Compose([
    40         1          3.0      3.0      0.0          transforms.ToTensor(),
    41         1         21.0     21.0      0.0          transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225]),
    42                                               ])
    43                                               # dataset and dataloader
    44         1          3.0      3.0      0.0      val_dataset = get_segmentation_dataset(args.dataset, split='val', mode='testval',
    45         1      22225.0  22225.0      0.0                                              transform=input_transform)
    46         1          4.0      4.0      0.0      val_loader = data.DataLoader(dataset=val_dataset,
    47         1          1.0      1.0      0.0                                          batch_size=1,
    48         1         96.0     96.0      0.0                                          shuffle=False)
    49                                           
    50                                           
    51         1    5176366.0 5176366.0      3.4      model = get_fast_scnn(args.dataset, pretrained=True, root=args.weights_folder, map_cpu=args.cpu).to(device)
    52                                           
    53       501  123635893.0 246778.2     81.1      for i, (image, label) in enumerate(val_loader):
    54                                                   
    55       500    2069116.0   4138.2      1.4          image = image.to(device)
    56                                           
    57       500     883111.0   1766.2      0.6          model.eval()
    58       500       5474.0     10.9      0.0          with torch.no_grad():
    59                                                   
    60       500    3498050.0   6996.1      2.3              outputs = model(image)
    61       500    2649916.0   5299.8      1.7          pred = torch.argmax(outputs[0], 1).squeeze(0).cpu().data.numpy()
    62       500    1096668.0   2193.3      0.7          mask = get_color_pallete(pred, args.dataset)
    63       500      12799.0     25.6      0.0          outname = os.path.splitext(os.path.split(args.input_pic)[-1])[0] + '.png'
    64       500   12770684.0  25541.4      8.4          mask.save(os.path.join(args.outdir, outname))

